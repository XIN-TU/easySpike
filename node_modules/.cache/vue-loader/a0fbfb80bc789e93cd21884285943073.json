{"remainingRequest":"/Users/xin/Desktop/UoE_S2/MSc/spikeSorting/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/xin/Desktop/UoE_S2/MSc/spikeSorting/src/components/Flow2.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/xin/Desktop/UoE_S2/MSc/spikeSorting/src/components/Flow2.vue","mtime":1626622913891},{"path":"/Users/xin/Desktop/UoE_S2/MSc/spikeSorting/node_modules/cache-loader/dist/cjs.js","mtime":1611951979501},{"path":"/Users/xin/Desktop/UoE_S2/MSc/spikeSorting/node_modules/babel-loader/lib/index.js","mtime":1611951976731},{"path":"/Users/xin/Desktop/UoE_S2/MSc/spikeSorting/node_modules/cache-loader/dist/cjs.js","mtime":1611951979501},{"path":"/Users/xin/Desktop/UoE_S2/MSc/spikeSorting/node_modules/vue-loader/lib/index.js","mtime":1611951979647}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nconst ListData = [\n  {\n    title: 'Bandpass Filter',\n    content: 'Performs a lazy filter on the recording extractor traces.'\n  },\n  {\n    title: 'Notch Filter',\n    content: 'Performs a notch filter on the recording extractor traces using scipy iirnotch function'\n  },\n  {\n    title: 'Remove Bad Channels',\n    content: 'Remove bad channels from the recording extractor'\n  },\n  {\n    title: 'Transform',\n    content: 'Transforms the traces from the given recording extractor with a scalar and offset. New traces = traces*scalar + offset'\n  },\n  {\n    title: 'Resample',\n    content: 'Resamples the recording extractor traces. If the resampling rate is multiple of the sampling rate, the faster scipy decimate function is used'\n  }\n]\nexport default {\n  props: ['current'],\n  data () {\n    return {\n      loading: true,\n      labelCol: { span: 4 },\n      wrapperCol: { span: 14 },\n      form: {\n        bandPass_filter: false,\n        freq_min: '',\n        freq_max: '',\n        freq_wid: '',\n        filter_type: '',\n        order: '',\n        chunk_size: ''\n      },\n      form1: {\n        notch_filter: false,\n        freq: '',\n        q: '',\n        chunk_size: ''\n      },\n      form2: {\n        remove_bad_channels: false,\n        bad_channel_ids: '',\n        bad_threshold: '',\n        seconds: '',\n        verbose: false\n      },\n      form3: {\n        transform: false,\n        scale: '',\n        offset: ''\n      },\n      form4: {\n        resample: false,\n        resample_rate: ''\n      },\n      ListData\n    }\n  },\n  methods: {\n    handleClick () {\n      this.loading = !this.loading\n    },\n    onSubmit () {\n      if (this.form.bandPass_filter === true) {\n        if (this.form.freq_min === '') {\n          this.form.freq_min = 300\n        }\n        if (this.form.freq_max === '') {\n          this.form.freq_max = 6000\n        }\n        if (this.form.freq_wid === '') {\n          this.form.freq_wid = 1000\n        }\n        if (this.form.filter_type === '') {\n          this.form.filter_type = 'fft'\n        }\n        if (this.form.order === '') {\n          this.form.order = 3\n        }\n        if (this.form.chunk_size === '') {\n          this.form.chunk_size = 300\n        }\n        console.log('submit bandpass filter', this.form)\n      }\n      if (this.form1.notch_filter === true) {\n        if (this.form1.freq === '') {\n          this.form1.freq = 3000\n        }\n        if (this.form1.q === '') {\n          this.form1.q = 30\n        }\n        if (this.form1.chunk_size === '') {\n          this.form1.chunk_size = 300\n        }\n        console.log('submit notch filter', this.form1)\n      }\n      if (this.form2.remove_bad_channels === true) {\n        if (this.form2.bad_channel_ids === '') {\n          this.form2.bad_channel_ids = 'None'\n        }\n        if (this.form2.bad_threshold === '') {\n          this.form2.bad_threshold = 2\n        }\n        if (this.form2.seconds === '') {\n          this.form2.seconds = 10\n        }\n        console.log('submit bad channels', this.form2)\n      }\n      if (this.form3.transform === true) {\n        if (this.form3.scale === '') {\n          this.form3.scale = 1\n        }\n        if (this.form3.offset === '') {\n          this.form3.offset = 0\n        }\n        console.log('submit transform', this.form3)\n      }\n      if (this.form4.resample === true) {\n        if (this.form4.resample_rate === '') {\n          this.form4.resample_rate = 0\n        }\n        console.log('submit resample', this.form4)\n      }\n      console.log (this.current)\n      this.current += 1\n      this.$emit('changeCurrent', this.current)\n    }\n  }\n}\n",{"version":3,"sources":["Flow2.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAifile":"Flow2.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div >\n    <a-card :loading=\"loading\" title=\"Pre-processing recording\" >\n    <a-card-grid style=\"width:30%;text-align:center\">\n      <h3> Pre-processing recording description </h3>\n      <a-list item-layout=\"horizontal\" :data-source=\"ListData\">\n        <a-list-item slot=\"renderItem\" slot-scope=\"item\">\n          <a-list-item-meta :description= \"item.content\">\n            <a slot=\"title\">{{ item.title }}</a>\n          </a-list-item-meta>\n        </a-list-item>\n      </a-list>\n    </a-card-grid>\n    <a-card-grid style=\"width:70%\" :hoverable=\"false\">\n      <h3>  Please choose the type of the pre-processing if you want </h3>\n      <br><br>\n              <a-collapse accordion>\n                <a-collapse-panel key=\"1\" header=\"Bandpass Filter\">\n                  <a-form-model :model=\"form\" :label-col=\"labelCol\" :wrapper-col=\"wrapperCol\">\n                      <a-form-model-item label=\"BandPass Filter: \">\n                        <a-switch v-model=\"form.bandPass_filter\" />\n                      </a-form-model-item>\n                    <a-tooltip placement=\"topLeft\" title=\"High-pass cutoff frequency\" arrow-point-at-center>\n                      <a-form-model-item label=\"Freq_min: \">\n                        <a-input v-model=\"form.freq_min\" placeholder=\"Default value is 300\" />\n                      </a-form-model-item>\n                    </a-tooltip>\n                     <a-tooltip placement=\"topLeft\" title=\"Low-pass cutoff frequency\" arrow-point-at-center>\n                      <a-form-model-item label=\"Freq_max: \">\n                        <a-input v-model=\"form.freq_max\" placeholder=\"Default value is 6000\" />\n                      </a-form-model-item>\n                     </a-tooltip>\n                    <a-tooltip placement=\"topLeft\" title=\"Width of the filter (when type is ‘fft’)\" arrow-point-at-center>\n                      <a-form-model-item label=\"Freq_wid: \">\n                        <a-input v-model=\"form.freq_wid\" placeholder=\"Default value is 1000\" />\n                      </a-form-model-item>\n                    </a-tooltip>\n                    <a-tooltip placement=\"topLeft\" title=\"The ‘fft’ filter uses a kernel in the frequency domain. The ‘butter’ filter uses scipy butter and filtfilt functions\" arrow-point-at-center>\n                      <a-form-model-item label=\"Filter Type\">\n                        <a-select v-model=\"form.filter_type\" placeholder=\"Default type is 'fft' \">\n                          <a-select-option value=\"fft\">\n                            fft\n                          </a-select-option>\n                          <a-select-option value=\"butter\">\n                            butter\n                          </a-select-option>\n                        </a-select>\n                      </a-form-model-item>\n                    </a-tooltip>\n                    <a-tooltip placement=\"topLeft\" title=\"Order of the filter (if ‘butter’)\" arrow-point-at-center>\n                      <a-form-model-item label=\"Order: \">\n                        <a-input v-model=\"form.order\" placeholder=\"Default value is 3\" />\n                      </a-form-model-item>\n                    </a-tooltip>\n                     <a-tooltip placement=\"topLeft\" title=\"The chunk size to be used for the filtering\" arrow-point-at-center>\n                      <a-form-model-item label=\"Chunk Size: \">\n                        <a-input v-model=\"form.chunk_size\" placeholder=\"Default value is 300\" />\n                      </a-form-model-item>\n                     </a-tooltip>\n                  </a-form-model>\n                </a-collapse-panel>\n                <a-collapse-panel key=\"2\" header=\"Notch Filter\">\n                  <a-form-model :model=\"form1\" :label-col=\"labelCol\" :wrapper-col=\"wrapperCol\">\n                    <a-form-model-item label=\"Notch Filter: \">\n                      <a-switch v-model=\"form1.notch_filter\" />\n                    </a-form-model-item>\n                    <a-tooltip placement=\"topLeft\" title=\"The target frequency of the notch filter\" arrow-point-at-center>\n                      <a-form-model-item label=\"Freq: \">\n                        <a-input v-model=\"form1.freq\" placeholder=\"Default value is 3000\" />\n                      </a-form-model-item>\n                    </a-tooltip>\n                    <a-tooltip placement=\"topLeft\" title=\"The quality factor of the notch filter\" arrow-point-at-center>\n                      <a-form-model-item label=\"q\">\n                        <a-input v-model=\"form1.q\" placeholder=\"Default value is 30\" />\n                      </a-form-model-item>\n                    </a-tooltip>\n                    <a-tooltip placement=\"topLeft\" title=\"The chunk size to be used for the filtering\" arrow-point-at-center>\n                      <a-form-model-item label=\"Chunk Size: \">\n                        <a-input v-model=\"form1.chunk_size\" placeholder=\"Default value is 300\" />\n                      </a-form-model-item>\n                    </a-tooltip>\n                  </a-form-model>\n                </a-collapse-panel>\n                <a-collapse-panel key=\"3\" header=\"Remove Bad Channels\">\n                  <a-form-model :model=\"form2\" :label-col=\"labelCol\" :wrapper-col=\"wrapperCol\">\n                    <a-form-model-item label=\"Remove Bad Channels: \">\n                      <a-switch v-model=\"form2.remove_bad_channels\" />\n                    </a-form-model-item>\n                    <a-tooltip placement=\"topLeft\" title=\"List of bad channel ids (int). If None, automatic removal will be done based on standard deviation\" arrow-point-at-center>\n                      <a-form-model-item label=\"Bad Channel Ids: \">\n                        <a-input v-model=\"form2.bad_channel_ids\" placeholder=\"Default value is None, the type is list\" />\n                      </a-form-model-item>\n                    </a-tooltip>\n                    <a-tooltip placement=\"topLeft\" title=\"If automatic is used, the threshold for the standard deviation over which channels are removed\" arrow-point-at-center>\n                      <a-form-model-item label=\"bad_threshold\">\n                        <a-input v-model=\"form2.bad_threshold\" placeholder=\"Default value is 2\" />\n                      </a-form-model-item>\n                    </a-tooltip>\n                    <a-tooltip placement=\"topLeft\" title=\"If automatic is used, the number of seconds used to compute standard deviations\" arrow-point-at-center>\n                      <a-form-model-item label=\"seconds: \">\n                        <a-input v-model=\"form2.seconds\" placeholder=\"Default value is 10\" />\n                      </a-form-model-item>\n                    </a-tooltip>\n                    <a-tooltip placement=\"topLeft\" title=\"If True, output is verbose\" arrow-point-at-center>\n                      <a-form-model-item label=\"Verbose: \">\n                        <a-switch v-model=\"form2.verbose\" />\n                      </a-form-model-item>\n                    </a-tooltip>\n                  </a-form-model>\n                </a-collapse-panel>\n                <a-collapse-panel key=\"4\" header=\"Transform\">\n                  <a-form-model :model=\"form3\" :label-col=\"labelCol\" :wrapper-col=\"wrapperCol\">\n                    <a-form-model-item label=\"Remove Bad Channels: \">\n                      <a-switch v-model=\"form3.transform\" />\n                    </a-form-model-item>\n                    <a-tooltip placement=\"topLeft\" title=\"Scalar for the traces of the recording extractor or array with scalars for each channel\" arrow-point-at-center>\n                      <a-form-model-item label=\"Scale: \">\n                        <a-input v-model=\"form3.scale\" placeholder=\"Default value is 1\" />\n                      </a-form-model-item>\n                    </a-tooltip>\n                    <a-tooltip placement=\"topLeft\" title=\"Offset for the traces of the recording extractor or array with offsets for each channel\" arrow-point-at-center>\n                      <a-form-model-item label=\"Offset:\">\n                        <a-input v-model=\"form3.offset\" placeholder=\"Default value is 0\" />\n                      </a-form-model-item>\n                    </a-tooltip>\n                  </a-form-model>\n                </a-collapse-panel>\n                <a-collapse-panel key=\"5\" header=\"Resample\">\n                  <a-form-model :model=\"form4\" :label-col=\"labelCol\" :wrapper-col=\"wrapperCol\">\n                    <a-form-model-item label=\"Resample: \">\n                      <a-switch v-model=\"form4.resample\" />\n                    </a-form-model-item>\n                    <a-tooltip placement=\"topLeft\" title=\"The resample recording extractor\" arrow-point-at-center>\n                        <a-form-model-item label=\"Resample_rate:\">\n                          <a-input v-model=\"form4.resample_rate\" placeholder=\"Default value is 0\" />\n                        </a-form-model-item>\n                      </a-tooltip>\n                    </a-form-model>\n                </a-collapse-panel>\n              </a-collapse>\n        <br><br>\n        <a-form-model>\n          <a-form-model-item :wrapper-col=\"{ span:100, offset: 100 }\">\n            <a-button type=\"primary\" @click=\"onSubmit\">\n              Confirm\n            </a-button>\n            <a-button style=\"margin-left: 10px;\">\n              Next One\n            </a-button>\n          </a-form-model-item>\n        </a-form-model>\n    </a-card-grid>\n    </a-card>\n\n    <a-button style=\"marginTop: 16px\" @click=\"handleClick\">\n      Toggle loading\n    </a-button>\n  </div>\n</template>\n\n<script>\nconst ListData = [\n  {\n    title: 'Bandpass Filter',\n    content: 'Performs a lazy filter on the recording extractor traces.'\n  },\n  {\n    title: 'Notch Filter',\n    content: 'Performs a notch filter on the recording extractor traces using scipy iirnotch function'\n  },\n  {\n    title: 'Remove Bad Channels',\n    content: 'Remove bad channels from the recording extractor'\n  },\n  {\n    title: 'Transform',\n    content: 'Transforms the traces from the given recording extractor with a scalar and offset. New traces = traces*scalar + offset'\n  },\n  {\n    title: 'Resample',\n    content: 'Resamples the recording extractor traces. If the resampling rate is multiple of the sampling rate, the faster scipy decimate function is used'\n  }\n]\nexport default {\n  props: ['current'],\n  data () {\n    return {\n      loading: true,\n      labelCol: { span: 4 },\n      wrapperCol: { span: 14 },\n      form: {\n        bandPass_filter: false,\n        freq_min: '',\n        freq_max: '',\n        freq_wid: '',\n        filter_type: '',\n        order: '',\n        chunk_size: ''\n      },\n      form1: {\n        notch_filter: false,\n        freq: '',\n        q: '',\n        chunk_size: ''\n      },\n      form2: {\n        remove_bad_channels: false,\n        bad_channel_ids: '',\n        bad_threshold: '',\n        seconds: '',\n        verbose: false\n      },\n      form3: {\n        transform: false,\n        scale: '',\n        offset: ''\n      },\n      form4: {\n        resample: false,\n        resample_rate: ''\n      },\n      ListData\n    }\n  },\n  methods: {\n    handleClick () {\n      this.loading = !this.loading\n    },\n    onSubmit () {\n      if (this.form.bandPass_filter === true) {\n        if (this.form.freq_min === '') {\n          this.form.freq_min = 300\n        }\n        if (this.form.freq_max === '') {\n          this.form.freq_max = 6000\n        }\n        if (this.form.freq_wid === '') {\n          this.form.freq_wid = 1000\n        }\n        if (this.form.filter_type === '') {\n          this.form.filter_type = 'fft'\n        }\n        if (this.form.order === '') {\n          this.form.order = 3\n        }\n        if (this.form.chunk_size === '') {\n          this.form.chunk_size = 300\n        }\n        console.log('submit bandpass filter', this.form)\n      }\n      if (this.form1.notch_filter === true) {\n        if (this.form1.freq === '') {\n          this.form1.freq = 3000\n        }\n        if (this.form1.q === '') {\n          this.form1.q = 30\n        }\n        if (this.form1.chunk_size === '') {\n          this.form1.chunk_size = 300\n        }\n        console.log('submit notch filter', this.form1)\n      }\n      if (this.form2.remove_bad_channels === true) {\n        if (this.form2.bad_channel_ids === '') {\n          this.form2.bad_channel_ids = 'None'\n        }\n        if (this.form2.bad_threshold === '') {\n          this.form2.bad_threshold = 2\n        }\n        if (this.form2.seconds === '') {\n          this.form2.seconds = 10\n        }\n        console.log('submit bad channels', this.form2)\n      }\n      if (this.form3.transform === true) {\n        if (this.form3.scale === '') {\n          this.form3.scale = 1\n        }\n        if (this.form3.offset === '') {\n          this.form3.offset = 0\n        }\n        console.log('submit transform', this.form3)\n      }\n      if (this.form4.resample === true) {\n        if (this.form4.resample_rate === '') {\n          this.form4.resample_rate = 0\n        }\n        console.log('submit resample', this.form4)\n      }\n      console.log (this.current)\n      this.current += 1\n      this.$emit('changeCurrent', this.current)\n    }\n  }\n}\n</script>\n"]}]}